definput party 1 key: array[16] int magnitude = 255;
// entered in reverse byte order
// eg : 2b7e151628aed2a6abf7158809cf4f3c -> 3c4fcf098815f7aba6d2ae2816157e2b
definput party 2 text: array[16] int magnitude = 255;
// entered in reverse byte order
// eg : 6bc1bee22e409f96e93d7e117393172a -> 2a179373117e3de9969f402ee2bec16b

defun slice( Array arr, int start, int stop ):
  ans = zeros(stop - start);
  loop i from 0 to stop - start:
    ans[i] = arr[start + i];
  end
  return ans;
end

defun rotate_left_one_arr( Array arr, int start, int stop ):
  var temp = arr[start];
  loop i from start to stop:
    arr[i] = arr[ i + 1 ];
  end
  arr[stop] = temp;
end

defun gf_mult( int a, int b ):
  a_copy = a;
  b_copy = b;
  p = 0;
  loop i from 0 to bit_width(b_copy):
    if select( b_copy, 0, 1 ) equals 1:
      p = p ^ a_copy;
    end
    b_copy = b_copy >> 1;
    carry = select( a_copy, 7, 8 );
    a_copy = trunc( a_copy << 1, 8 );
    if carry equals 1:
      a_copy = a_copy ^ 0x1b;
    end
  end
  return p;
end

mix_cols =
[ 2, 3, 1, 1,
  1, 2, 3, 1,
  1, 1, 2, 3,
  3, 1, 1, 2 ];

defun mix_column( Array a ): // a must be of size 4
  out = zeros(4);
  loop row from 0 to 4:
    temp = 0;
    loop col from 0 to 4:
      temp = temp ^ gf_mult( a[col], mix_cols[ (row << 2) + col ] );
    end
    out[row] = temp;
  end
  return out;
end

defun mix_cols( Array state ):
  loop col from 0 to 4:
    column = zeros(4);
    loop row from 0 to 4:
      column[row] = state[ (row << 2) + col ];
    end
    column = mix_column( column );
    loop row from 0 to 4:
      state[ (row << 2) + col ] = column[row];
    end
  end
end
    
defun add_round_key( Array subkey, Array state ):
  loop i from 0 to length(subkey):
    state[i] = subkey[i] ^ state[i];
  end
end

defun rcon( int i ):
  accum = 0x8d;
  loop index from 0 to i:
    accum = gf_mult( accum, 2 );
  end
  return accum;
end

defun at( int i, int bit ):
  return select( i, bit, bit + 1 );
end

defun s_box( int a ):
  q3 = (at( a, 7 ) & (at( a, 5 ) ^ at( a, 4 ) ^ at( a, 1 ) ^ at( a, 0 ))) ^
       (at( a, 6 ) & (at( a, 5 ) ^ at( a, 4 ) ^ at( a, 2 ) ^ at( a, 1 ))) ^
       (at( a, 5 ) & (at( a, 4 ) ^ at( a, 2 ) ^ at( a, 1 ) ^ at( a, 0 ))) ^
       (at( a, 4 ) & (at( a, 2 ) ^ at( a, 1 ))) ^
       (at( a, 3 ) & (at( a, 2 ) ^ at( a, 1 ))) ^
       (at( a, 2 ) & (at( a, 1 )));
  
  q2 = (at( a, 7 ) & (at( a, 6 ) ^ at( a, 5 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 ))) ^
       (at( a, 6 ) & (at( a, 5 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 1 ) ^ at( a, 0 ))) ^
       (at( a, 5 ) & (at( a, 3 ) ^ at( a, 2 ))) ^
       (at( a, 4 ) & (at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 ))) ^
       (at( a, 3 ) & (at( a, 2 ) ^ at( a, 0 ))) ^
       ((at( a, 2 ) ^ at( a, 1 )) & at( a, 0 ));

  q1 = (at( a, 7 ) & (at( a, 5 ) ^ at( a, 2 ) ^ at( a, 0 ) ^ 1)) ^
       (at( a, 6 ) & (at( a, 5 ) ^ at( a, 3 ))) ^
       (at( a, 5 ) & (at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 ) ^ 1)) ^
       (at( a, 4 ) & (at( a, 2 ) ^ 1)) ^
       (at( a, 3 ) & (at( a, 2 ) ^ at( a, 0 ))) ^
       (at( a, 2 ) & (at( a, 1 ) ^ at( a, 0 ) ^ 1)) ^
       (at( a, 1 ));

  q0 = (at( a, 7 ) & (at( a, 6 ) ^ at( a, 4 ) ^ at( a, 0 ))) ^
       (at( a, 6 ) & (at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 1 ) ^ 1)) ^
       (at( a, 5 ) & (at( a, 3 ) ^ at( a, 0 ) ^ 1)) ^
       (at( a, 4 ) & (at( a, 3 ) ^ at( a, 1 ))) ^
       (at( a, 3 ) & (at( a, 2 ) ^ at( a, 1 ) ^ at( a, 0 ) ^ 1)) ^
       ((at( a, 2 ) ^ at( a, 1 )) & at( a, 0 )) ^
       (at( a, 0 ) ^ at( a, 2 ));

  y3 = q3 ^ (q3 & q2 & q1) ^ (q3 & q0) ^ q2;
  y2 = (q3 & q2 & q1) ^ (q3 & q2 & q0) ^ (q3 & q0) ^ 
        q2 ^ (q2 & q1);
  y1 = q3 ^ (q3 & q2 & q1) ^ (q3 & q1 & q0) ^ q2 ^ 
        (q2 & q0) ^ q1;
  y0 = (q3 & q2 & q1) ^ (q3 & q2 & q0) ^ (q3 & q1) ^ 
        (q3 & q1 & q0) ^ (q3 & q0) ^ q2 ^ (q2 & q1) ^ 
        (q2 & q1 & q0) ^ q1 ^ q0;

  t7 = (y3 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 4 ) ^ at( a, 0 ))) ^
       (y2 & (at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 0 ))) ^
       (y1 & (at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 1 ))) ^
       (y0 & (at( a, 7 ) ^ at( a, 2 ) ^ at( a, 1 )));
  t6 = (y3 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 4 ))) ^
       (y2 & (at( a, 7 ) ^ at( a, 5 ) ^ at( a, 1 ))) ^
       (y1 & (at( a, 6 ) ^ at( a, 5 ) ^ at( a, 4 ))) ^
       (y0 & (at( a, 6 ) ^ at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 )));	   
  t5 = (y3 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 5 ) ^ at( a, 2 ))) ^
       (y2 & (at( a, 7 ) ^ at( a, 5 ) ^ at( a, 0 ))) ^
       (y1 & (at( a, 4 ) ^ at( a, 3 ))) ^
       (y0 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 5 )));	   
  t4 = (y3 & (at( a, 6 ) ^ at( a, 5 ) ^ at( a, 2 ))) ^
       (y2 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 5 ) ^ at( a, 3 ) ^ at( a, 2 ))) ^
       (y1 & (at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 1 ) ^ at( a, 0 ))) ^
       (y0 & (at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 )));
  t3 = (y3 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 1 ))) ^
       (y2 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 5 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 ))) ^
       (y1 & (at( a, 7 ) ^ at( a, 3 ) ^ at( a, 1 ) ^ at( a, 0 ))) ^
       (y0 & (at( a, 6 ) ^ at( a, 4 ) ^ at( a, 1 ) ^ at( a, 0 )));
  t2 = (y3 & (at( a, 5 ) ^ at( a, 2 ) ^ at( a, 1 ) ^ at( a, 0 ))) ^
       (y2 & (at( a, 7 ) ^ at( a, 6 ) ^ at( a, 5 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 ))) ^
       (y1 & (at( a, 7 ) ^ at( a, 5 ) ^ at( a, 4 ))) ^
       (y0 & (at( a, 4 ) ^ at( a, 2 ) ^ at( a, 1 ) ^ at( a, 0 )));
  t1 = (y3 & (at( a, 6 ) ^ at( a, 4 ) ^ at( a, 3 ) ^ at( a, 1 ))) ^
       (y2 & (at( a, 6 ) ^ at( a, 5 ) ^ at( a, 3 ) ^ at( a, 1 ))) ^
       (y1 & (at( a, 7 ))) ^
       (y0 & (at( a, 6 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 )));
  t0 = (y3 & (at( a, 7 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 1 ))) ^
       (y2 & (at( a, 7 ) ^ at( a, 4 ) ^ at( a, 0 ))) ^
       (y1 & (at( a, 6 ) ^ at( a, 4 ) ^ at( a, 2 ) ^ at( a, 0 ))) ^
       (y0 & (at( a, 5 ) ^ at( a, 3 ) ^ at( a, 2 ) ^ at( a, 0 )));

  return (t7 cat t6 cat t5 cat t4 cat t3 cat t2 cat t1 cat t0) ^ 99;
end

defun subbytes( Array state ):
  loop i from 0 to length( state ):
    state[i] = s_box( state[i] );
  end
end

defun key_schedule_core( Array word, int i ):
  rotate_left_one_arr( word, 0, length(word) - 1 );
  subbytes( word );
  word[0] = word[0] ^ rcon( i );
end

filled = 0;
expanded_key = zeros(176);

defun add_to_key( Array new ):
  loop ind from 0 to length(new):
    expanded_key[filled] = new[ind];
    filled = filled + 1;
  end
end

defun transpose( Array arr ):
  ans = zeros(16);
  loop i from 0 to 4:
    loop j from 0 to 4:
      ans[ (i << 2) + j ] = arr[i + (j << 2)];
    end
  end
  return ans;
end

iteration = 0;

defun create_round_key():
  ans = slice( expanded_key, iteration << 4, (iteration + 1) << 4);
  ans = transpose(ans);
  iteration = iteration + 1;
  return ans;
end

defun key_schedule():
  add_to_key( key );
  rcon_it = 1;
  loop i from 0 to 10:
    temp = slice( expanded_key, filled - 4, filled );
    key_schedule_core( temp, rcon_it );
    rcon_it = rcon_it + 1;
    before = slice( expanded_key, filled - 16, filled - 12 );
    add_round_key( before, temp );

    add_to_key( temp );
    
    loop j from 0 to 3:
      temp = slice( expanded_key, filled - 4, filled );
      before = slice( expanded_key, filled - 16, filled - 12 );
      add_round_key( before, temp );
      add_to_key( temp );
    end
  end
end

key_schedule();
DEBUG expanded_key;
round_key = create_round_key();
state = transpose(text);
DEBUG state;
add_round_key( round_key, state );
DEBUG state;

loop i from 0 to 9:
  round_key = create_round_key();
  subbytes( state );
  DEBUG state;
  loop row from 0 to 4:
    loop time from 0 to row:
      rotate_left_one_arr( state, row << 2, (row << 2) + 3 );
    end
  end
  DEBUG state;
  mix_cols( state );
  DEBUG state;
  add_round_key( round_key, state );
  DEBUG state;
end

subbytes(state);
loop row from 0 to 4:
  loop time from 0 to row:
    rotate_left_one_arr( state, row << 2, (row << 2) + 3 );
  end
end
add_round_key( create_round_key(), state );

state = transpose(state);

defoutput state;
