definput party 1 key: array[16] int magnitude = 255;
definput party 2 text: array[16] int magnitude = 255;

defun slice( Array arr, int start, int stop ):
  ans = zeros(stop - start);
  loop i from 0 to stop - start:
    ans[i] = arr[start + i];
  end
  return ans;
end

defun rotate_left_one_arr( Array arr, int start, int stop ):
  var temp = arr[start];
  loop i from start to stop:
    arr[i] = arr[ i + 1 ];
  end
  arr[stop] = temp;
end

defun gf_mult( int a, int b ):
  a_copy = a;
  b_copy = b;
  p = 0;
  loop i from 0 to bit_width(b_copy):
    if select( b_copy, 0, 1 ) == 1:
      p = p ^ a_copy;
    end
    b_copy = b_copy >> 1;
    carry = select( a_copy, 7, 8 );
    a_copy = trunc( a_copy << 1, 8 );
    if carry == 1:
       a_copy = a_copy ^ 0x1b;
    end
  end
  return p;
end    

mix_cols =
[ 2, 3, 1, 1,
  1, 2, 3, 1,
  1, 1, 2, 3,
  3, 1, 1, 2 ];

defun mix_column( Array a ): // a must be of size 4
  out = zeros(4);
  loop row from 0 to 4:
    temp = 0;
    loop col from 0 to 4:
      temp = temp ^ gf_mult( a[col], mix_cols[ (row << 2) + col ] );
    end
    out[row] = temp;
  end
  return out;
end

defun mix_cols( Array state ):
  loop col from 0 to 4:
    column = zeros(4);
    loop row from 0 to 4:
      column[row] = state[ (row << 2) + col ];
    end
    column = mix_column( column );
    loop row from 0 to 4:
      state[ (row << 2) + col ] = column[row];
    end
  end
end
    
defun add_round_key( Array subkey, Array state ):
  loop i from 0 to length(subkey):
    state[i] = subkey[i] ^ state[i];
  end
end

defun rcon( int i ):
  accum = 0x8d;
  loop index from 0 to i:
    accum = gf_mult( accum, 2 );
  end
  return accum;
end

defun at( int i, int bit ):
  return select( i, bit, bit + 1 );
end

defun affine( int a ):
  t1 = at(a,0) ^ at(a,1);
  t2 = at(a,2) ^ at(a,3);
  t3 = at(a,4) ^ at(a,5);
  t4 = at(a,6) ^ at(a,7);

  out0 = ~(at(a,0)) ^ t3 ^ t4;
  out1 = ~(at(a,5)) ^ t1 ^ t4;
  out2 = at(a,2) ^ t1 ^ t4;
  out3 = at(a,7) ^ t1 ^ t2;
  out4 = at(a,4) ^ t1 ^ t2;
  out5 = ~(at(a,1)) ^ t2 ^ t3;
  out6 = ~(at(a,6)) ^ t2 ^ t3;
  out7 = at(a,3) ^ t3 ^ t4;
  return out7 cat out6 cat out5 cat out4 cat out3 cat out2 cat out1 cat out0;
end

defun map( int a ):
  A = at(a,1) ^ at(a,7);
  B = at(a,5) ^ at(a,7);
  C = at(a,4) ^ at(a,6);
  L0 = C ^ at(a,0) ^ at(a,5);
  L1 = at(a,1) ^ at(a,2);
  L2 = at(a,2) ^ at(a,4);
  H0 = C ^ at(a,5);
  H1 = A ^ C;
  H2 = B ^ at(a,2) ^ at(a,3);
  return (B cat H2 cat H1 cat H0 cat L2 cat A cat L1 cat L0);
end

defun square( int a ):
  t1 = at(a,0) ^ at(a,2);
  t2 = at(a,2) ^ 0;
  t3 = at(a,1) ^ at(a,3);
  t4 = at(a,3) ^ 0;
  return (t4 cat t3 cat t2 cat t1);
end

defun mult( int a, int b ):
  A = at(a,0) ^ at(a,3);
  B = at(a,2) ^ at(a,3);
  C = at(a,1) ^ at(a,2);
  and00 = at(a,0) & at(b,0);
  and31 = at(a,3) & at(b,1);
  and22 = at(a,2) & at(b,2);
  and13 = at(a,1) & at(b,3);
  q0 = and00 ^ and31 ^ and22 ^ and13;
  and10 = at(a,1) & at(b,0);
  andA1 = A & at(b,1);
  andB2 = B & at(b,2);
  andC3 = C & at(b,3);
  q1 = and10 ^ andA1 ^ andB2 ^ andC3;
  and20 = at(a,2) & at(b,0);
  and11 = at(a,1) & at(b,1);
  andA2 = A & at(b,2);
  andB3 = B & at(b,3);
  q2 = and20 ^ and11 ^ andA2 ^ andB3;
  and30 = at(a,3) & at(b,0);
  and21 = at(a,2) & at(b,1);
  and12 = at(a,1) & at(b,2);
  andA3 = A & at(b,3);
  q3 = and30 ^ and21 ^ and12 ^ andA3;
  return (q3 cat q2 cat q1 cat q0);
end

defun multe( int a ):
  A = at(a,0) ^ at(a,1);
  B = at(a,2) ^ at(a,3);
  q0 = at(a,1) ^ B;
  q2 = A ^ at(a,2);
  q3 = A ^ B;
  return (q3 cat q2 cat A cat q0);
end

defun invt( int a ):
  and01 = at(a,0) & at(a,1);
  and02 = at(a,0) & at(a,2);
  and03 = at(a,0) & at(a,3);
  and12 = at(a,1) & at(a,2);
  and13 = at(a,1) & at(a,3);
  and23 = at(a,2) & at(a,3);
  and012 = and01 & at(a,2);
  and123 = and12 & at(a,3);
  and023 = and02 & at(a,3);
  and013 = and01 & at(a,3);
  A = at(a,1) ^ at(a,2) ^ at(a,3) ^ and123;
  q0 = A ^ at(a,0) ^ and02 ^ and12 ^ and012;
  q1 = and01 ^ and02 ^ and12 ^ at(a,3) ^ and13 ^ and013;
  q2 = and01 ^ at(a,2) ^ and02 ^ at(a,3) ^ and03 ^ and023;
  q3 = A ^ and03 ^ and13 ^ and23;
  return (q3 cat q2 cat q1 cat q0);
end

defun invmap( int a ):
  A = at(a,1) ^ at(a,7);
  B = at(a,4) ^ at(a,5);
  a0 = at(a,0) ^ at(a,4);
  a1 = B ^ at(a, 7);
  a2 = A ^ B;
  a3 = B ^ at(a,1) ^ at(a,6);
  a4 = A ^ B ^ at(a,3);
  a5 = B ^ at(a,2);
  a6 = A ^ at(a,2) ^ at(a,3) ^ at(a,4);
  a7 = B ^ at(a,2) ^ at(a,7);
  return (a7 cat a6 cat a5 cat a4 cat a3 cat a2 cat a1 cat a0);
end

defun inverse( int a ):
  map_a = map(a);
  map_low = select( map_a, 0, 4 );
  map_high = select( map_a, 4, 8 );
  square0 = square( map_high );
  square1 = square( map_low );
  mult0 = mult( map_high, map_low );
  xor0 = map_low ^ map_high;
  multe = multe( square0 );
  xor1 = square1 ^ multe;
  xor2 = mult0 ^ xor1;
  invt = invt( xor2 );
  mult1 = mult( map_high, invt );
  mult2 = mult( xor0, invt );
  return invmap( mult1 cat mult2 );
end

defun s_box( int a ):
  return affine( inverse(a) );
end

defun subbytes( Array state ):
  loop i from 0 to length( state ):
    state[i] = s_box( state[i] );
  end
end

defun key_schedule_core( Array word, int i ):
  rotate_left_one_arr( word, 0, length(word) - 1 );
  subbytes( word );
  word[0] = word[0] ^ rcon( i );
end

filled = 0;
expanded_key = zeros(176);

defun transpose( Array arr ):
  ans = zeros( 16 );
  loop i from 0 to 4:
    loop j from 0 to 4:
      ans[ (i << 2) + j ] = arr[ (j << 2) + i ];
    end
  end
  return ans;
end

defun create_round_key( int round ):
  ans = slice( expanded_key, round << 4, (round << 4) + 16 );
  return transpose( ans );
end

defun add_to_key( Array new ):
  loop ind from 0 to length(new):
    expanded_key[filled] = new[ind];
    filled = filled + 1;
  end
end

defun key_schedule():
  add_to_key( key );
  rcon_it = 1;
  loop i from 0 to 10:
    temp = slice( expanded_key, filled - 4, filled );
    key_schedule_core( temp, rcon_it );
    rcon_it = rcon_it + 1;
    before = slice( expanded_key, filled - 16, filled - 12 );
    add_round_key( before, temp );

    add_to_key( temp );
    
    loop j from 0 to 3:
      temp = slice( expanded_key, filled - 4, filled );
      before = slice( expanded_key, filled - 16, filled - 12 );
      add_round_key( before, temp );
      add_to_key( temp );
    end
  end
end

key_schedule();

round_key = create_round_key( 0 );
state = transpose( text );
add_round_key( round_key, state );

loop i from 0 to 10:
  round_key = create_round_key( i + 1 );
  subbytes( state );
  loop row from 0 to 4:
    loop time from 0 to row:
      rotate_left_one_arr( state, row << 2, (row << 2) + 3 ); 
    end
  end
  if !(i == 9):
    mix_cols( state );
  end
  add_round_key( round_key, state );
end

state = transpose( state );
defoutput state;
